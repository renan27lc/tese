import pandas as pd

# Carregar os dados (ajuste o caminho do arquivo conforme necessário)
df = pd.read_csv('/content/sample_data/selic.csv', sep=';', decimal=',', parse_dates=['Data'], dayfirst=True)

# Converter a coluna Selic para string antes de usar .str para tratar a vírgula como decimal
# Garante que a coluna é tratada como texto antes de substituir a vírgula
df['Selic'] = df['Selic'].astype(str).str.replace(',', '.', regex=False).astype(float)

# Extrair ano e mês para agrupamento
df['AnoMes'] = df['Data'].dt.to_period('M')

# Calcular média mensal
selic_mensal = df.groupby('AnoMes')['Selic'].mean().reset_index()
selic_mensal.columns = ['Data', 'Selic_Media']

# Converter o período para datetime (opcional)
selic_mensal['Data'] = selic_mensal['Data'].dt.to_timestamp()

# Ordenar por data
selic_mensal = selic_mensal.sort_values('Data')

# Salvar em novo arquivo CSV
selic_mensal.to_csv('selic_mensal.csv', index=False, decimal=',', sep=';')

# Mostrar resultado
print(selic_mensal.head())





import pandas as pd
import matplotlib.pyplot as plt

# Carregar os dados com a codificação correta
dados = pd.read_csv('/content/sample_data/dp_br.csv', sep=';', decimal=',', thousands='.', encoding='latin-1')

# Renomear a coluna longa
dados = dados.rename(columns={
    'DLSP': 'Dívida_USD'
})

# Função personalizada para converter datas no formato MMM/AA
def converter_data(data_str):
    meses = {
        'jan': '01', 'fev': '02', 'mar': '03', 'abr': '04',
        'mai': '05', 'jun': '06', 'jul': '07', 'ago': '08',
        'set': '09', 'out': '10', 'nov': '11', 'dez': '12'
    }
    
    mes, ano = data_str.split('/')
    ano = '19' + ano if int(ano) >= 90 else '20' + ano
    return f"{ano}-{meses[mes.lower()]}-01"  # Definindo sempre dia 01

# Aplicar a conversão
dados['Data'] = dados['Data'].apply(converter_data)
dados['Data'] = pd.to_datetime(dados['Data'])

# Converter valores para float
dados['Dívida_USD'] = dados['Dívida_USD'].astype(float)

# Verificar os resultados
print(dados.head())
print("\nÚltimos registros:")
print(dados.tail())

# Plotar os dados
plt.figure(figsize=(12, 6))
plt.plot(dados['Data'], dados['Dívida_USD'])
plt.title('Dívida Líquida do Setor Público Brasileiro (USD)')
plt.xlabel('Ano')
plt.ylabel('USD Milhões')
plt.grid(True)
plt.show()






import pandas as pd
import matplotlib.pyplot as plt

# Carregar os dados com a codificação correta
dados = pd.read_csv('/content/sample_data/pib_br.csv', sep=';', decimal=',', thousands='.', encoding='latin-1')



# Função personalizada para converter datas no formato MMM/AA
def converter_data(data_str):
    meses = {
        'jan': '01', 'fev': '02', 'mar': '03', 'abr': '04',
        'mai': '05', 'jun': '06', 'jul': '07', 'ago': '08',
        'set': '09', 'out': '10', 'nov': '11', 'dez': '12'
    }
    
    mes, ano = data_str.split('/')
    ano = '19' + ano if int(ano) >= 90 else '20' + ano
    return f"{ano}-{meses[mes.lower()]}-01"  # Definindo sempre dia 01

# Aplicar a conversão
dados['Data'] = dados['Data'].apply(converter_data)
dados['Data'] = pd.to_datetime(dados['Data'])

# Converter valores para float
dados['GDP_br'] = dados['GDP_br'].astype(float)

# Verificar os resultados
print(dados.head())
print("\nÚltimos registros:")
print(dados.tail())

# Plotar os dados
plt.figure(figsize=(12, 6))
plt.plot(dados['Data'], dados['GDP_br'])
plt.title('Produto Interno Bruto Brasileiro (USD)')
plt.xlabel('Ano')
plt.ylabel('USD Milhões')
plt.grid(True)
plt.show()





import pandas as pd
import matplotlib.pyplot as plt

# Carregar os dados com a codificação correta
dados = pd.read_csv('/content/sample_data/cambio_br.csv', sep=';', decimal=',', thousands='.', encoding='latin-1')



# Função personalizada para converter datas no formato MMM/AA
def converter_data(data_str):
    meses = {
        'jan': '01', 'fev': '02', 'mar': '03', 'abr': '04',
        'mai': '05', 'jun': '06', 'jul': '07', 'ago': '08',
        'set': '09', 'out': '10', 'nov': '11', 'dez': '12'
    }
    
    mes, ano = data_str.split('/')
    ano = '19' + ano if int(ano) >= 90 else '20' + ano
    return f"{ano}-{meses[mes.lower()]}-01"  # Definindo sempre dia 01

# Aplicar a conversão
dados['Data'] = dados['Data'].apply(converter_data)
dados['Data'] = pd.to_datetime(dados['Data'])

# Converter valores para float
dados['BRL_to_USD'] = dados['BRL_to_USD'].astype(float)

# Verificar os resultados
print(dados.head())
print("\nÚltimos registros:")
print(dados.tail())

# Plotar os dados
plt.figure(figsize=(12, 6))
plt.plot(dados['Data'], dados['BRL_to_USD'])
plt.title('Câmbio Brasil')
plt.xlabel('Ano')
plt.ylabel('BRL/USD')
plt.grid(True)
plt.show()
